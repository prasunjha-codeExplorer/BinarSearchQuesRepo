
class Solution {
    public static int binarySearch(int[] a,int[] b,int k){
        int start = 0;
        int end = Math.min(a.length,b.length);
        boolean flag = true;
        if(a.length > b.length){flag=false;}
        while(start<=end){
            int mid = start + (end-start)/2;
            int restEle = k-mid;
            if(flag && restEle > b.length){start = mid+1;}
           else if(!flag && restEle > a.length){start = mid+1;}
            else if(restEle < 0){end=mid-1;}
            else{
                int l1,l2,r1,r2;
                l1=l2=Integer.MIN_VALUE;
                r1=r2=Integer.MAX_VALUE;
                if(!flag){
                    if(mid>0){l1=b[mid-1];}
                    if(restEle>0){l2=a[restEle-1];}
                    if(mid<b.length){r1=b[mid];}
                    if(restEle<a.length){r2=a[restEle];}
                    }else{
                    if(mid>0){l1=a[mid-1];}
                    if(restEle>0){l2=b[restEle-1];}
                    if(mid<a.length){r1=a[mid];}
                    if(restEle<b.length){r2=b[restEle];}
            }
            if(l1<=r2 && l2<=r1){
                return Math.max(l1,l2);
            }
            if(l2 > r1){
                start = mid+1;
            }else{
                end = mid-1;
            }
        }
    }
    return 0;
    }
    public int kthElement(int a[], int b[], int k) {
        // code here
        return binarySearch(a,b,k);
    }
}
